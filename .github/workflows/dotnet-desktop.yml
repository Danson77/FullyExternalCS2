name: .NET Build and Autobuild Release

on:
  push:
    branches: [ "main" ]

env:
  Project_Path: CS2Cheat.csproj
  Output_Dir: publish

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Build and publish project
      run: |
        dotnet publish $env:Project_Path -c Release -o $env:Output_Dir -r win-x64 `
          /p:PublishSingleFile=true `
          /p:IncludeNativeLibrariesForSelfExtract=true `
          /p:IncludeAllContentForSelfExtract=true `
          /p:DeleteExistingFiles=true `
          --self-contained false
      env:
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

    - name: Upload exe artifact
      uses: actions/upload-artifact@v4
      with:
        name: Built-Executable
        path: ${{ env.Output_Dir }}/*.exe

  release:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: Built-Executable
        path: ./publish

    - name: Get latest tag
      id: get_latest_tag
      run: |
        git fetch --tags
        latest_tag=$(git tag --list "v*" --sort=-v:refname | head -n 1)
        echo "Latest tag: $latest_tag"
        if [[ -z "$latest_tag" ]]; then
          latest_tag="v0.0.0"
        fi
        echo "::set-output name=tag::$latest_tag"
      shell: bash

    - name: Calculate new tag
      id: new_tag
      run: |
        latest=${{ steps.get_latest_tag.outputs.tag }}
        base_version=$(echo $latest | sed -E 's/^v([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
        IFS='.' read -r major minor patch <<< "$base_version"
        patch=$((patch + 1))
        new_tag="v${major}.${minor}.${patch}-autobuild"
        echo "New tag: $new_tag"
        echo "::set-output name=tag::$new_tag"
      shell: bash

    - name: Create and push new tag
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git tag ${{ steps.new_tag.outputs.tag }}
        git push origin ${{ steps.new_tag.outputs.tag }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.new_tag.outputs.tag }}
        name: Release ${{ steps.new_tag.outputs.tag }}
        files: ./publish/*.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
